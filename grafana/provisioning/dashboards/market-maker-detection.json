{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 1,
  "id": null,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "datasource": {
        "type": "postgres",
        "uid": "P528E980D87101141"
      },
      "description": "Depth at different price levels from mid",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": true,
            "axisColorMode": "text",
            "axisLabel": "Volume (USDT)",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "bars",
            "fillOpacity": 100,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          },
          "unit": "currencyUSD"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Bid Depth"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "green",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Ask Depth"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "red",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.transform",
                "value": "negative-Y"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 10,
        "w": 12,
        "x": 0,
        "y": 0
      },
      "id": 1,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "P528E980D87101141"
          },
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "WITH latest_data AS (\n  SELECT DISTINCT ON (mm.exchange)\n    mm.exchange,\n    mm.bid_depth_1pct,\n    mm.ask_depth_1pct,\n    mm.bid_depth_2pct,\n    mm.ask_depth_2pct,\n    md.last_price\n  FROM mm_metrics mm\n  JOIN market_data md ON mm.exchange = md.exchange AND mm.symbol = md.symbol\n  WHERE mm.symbol = '$symbol'\n    AND $__timeFilter(mm.timestamp)\n    AND $__timeFilter(md.timestamp)\n  ORDER BY mm.exchange, mm.timestamp DESC\n)\nSELECT \n  '0.5%' as price_level,\n  ROUND((bid_depth_1pct * 0.5 * last_price)::numeric, 0) as \"Bid Depth (USDT)\",\n  ROUND((-ask_depth_1pct * 0.5 * last_price)::numeric, 0) as \"Ask Depth (USDT)\"\nFROM latest_data\nWHERE exchange = '$exchange_filter'\n\nUNION ALL\n\nSELECT \n  '1%' as price_level,\n  ROUND((bid_depth_1pct * last_price)::numeric, 0) as \"Bid Depth (USDT)\",\n  ROUND((-ask_depth_1pct * last_price)::numeric, 0) as \"Ask Depth (USDT)\"\nFROM latest_data\nWHERE exchange = '$exchange_filter'\n\nUNION ALL\n\nSELECT \n  '2%' as price_level,\n  ROUND((bid_depth_2pct * last_price)::numeric, 0) as \"Bid Depth (USDT)\",\n  ROUND((-ask_depth_2pct * last_price)::numeric, 0) as \"Ask Depth (USDT)\"\nFROM latest_data\nWHERE exchange = '$exchange_filter'\n\nORDER BY price_level",
          "refId": "A"
        }
      ],
      "title": "Liquidity Depth Profile",
      "type": "barchart"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "P528E980D87101141"
      },
      "description": "Symmetric orders on both sides",
      "fieldConfig": {
        "defaults": {
          "custom": {
            "align": "auto",
            "cellOptions": {
              "type": "auto"
            },
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 10,
        "w": 12,
        "x": 12,
        "y": 0
      },
      "id": 2,
      "options": {
        "showHeader": true,
        "sortBy": []
      },
      "pluginVersion": "10.0.0",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "P528E980D87101141"
          },
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "WITH latest_book AS (\n  SELECT \n    bids::jsonb as bids,\n    asks::jsonb as asks,\n    timestamp\n  FROM orderbook_snapshots\n  WHERE symbol = '$symbol'\n    AND exchange = '$exchange_filter'\n  ORDER BY timestamp DESC\n  LIMIT 1\n),\nlatest_price AS (\n  SELECT last_price\n  FROM market_data\n  WHERE symbol = '$symbol'\n    AND exchange = '$exchange_filter'\n  ORDER BY timestamp DESC\n  LIMIT 1\n),\nbid_volumes AS (\n  SELECT \n    (bid_data->>0)::numeric as bid_price,\n    ROUND((bid_data->>1)::numeric * (SELECT last_price FROM latest_price), 2) as usd_value\n  FROM latest_book,\n    jsonb_array_elements(bids) as bid_data\n  LIMIT 10\n),\nask_volumes AS (\n  SELECT \n    (ask_data->>0)::numeric as ask_price,\n    ROUND((ask_data->>1)::numeric * (SELECT last_price FROM latest_price), 2) as usd_value\n  FROM latest_book,\n    jsonb_array_elements(asks) as ask_data\n  LIMIT 10\n)\nSELECT \n  bv.usd_value as \"Order Size (USDT)\",\n  bv.bid_price as \"Bid Price\",\n  av.ask_price as \"Ask Price\",\n  ROUND((av.ask_price - bv.bid_price)::numeric, 2) as \"Spread\",\n  'SYMMETRIC' as \"Type\"\nFROM bid_volumes bv\nJOIN ask_volumes av ON bv.usd_value = av.usd_value\nORDER BY bv.usd_value DESC",
          "refId": "A"
        }
      ],
      "title": "Symmetric Orders Detection",
      "type": "table"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "P528E980D87101141"
      },
      "description": "Trade size distribution patterns",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "fillOpacity": 70,
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineWidth": 0,
            "spanNulls": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          },
          "unit": "none"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 10
      },
      "id": 3,
      "options": {
        "barRadius": 0,
        "barWidth": 0.8,
        "fullHighlight": false,
        "groupWidth": 0.7,
        "legend": {
          "calcs": ["sum"],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "orientation": "vertical",
        "showValue": "auto",
        "stacking": "normal",
        "tooltip": {
          "mode": "single",
          "sort": "none"
        },
        "xTickLabelRotation": 0,
        "xTickLabelSpacing": 100
      },
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "P528E980D87101141"
          },
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT \n  $__timeGroupAlias(timestamp, 5m),\n  CASE \n    WHEN quantity * price < 1000 THEN 'Small (<1K USDT)'\n    WHEN quantity * price < 10000 THEN 'Medium (1K-10K USDT)'\n    WHEN quantity * price < 100000 THEN 'Large (10K-100K USDT)'\n    ELSE 'Very Large (>100K USDT)'\n  END as metric,\n  COUNT(*) as value\nFROM trades\nWHERE symbol = '$symbol'\n  AND CASE \n    WHEN '$exchange_filter' = '__all' THEN true\n    ELSE exchange = '$exchange_filter'\n  END\n  AND $__timeFilter(timestamp)\nGROUP BY time, metric\nORDER BY time",
          "refId": "A"
        }
      ],
      "title": "Trade Size Distribution",
      "type": "barchart"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "P528E980D87101141"
      },
      "description": "Detailed breakdown of trade sizes and calculations",
      "fieldConfig": {
        "defaults": {
          "custom": {
            "align": "auto",
            "cellOptions": {
              "type": "auto"
            },
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "avg_usd_value"
            },
            "properties": [
              {
                "id": "unit",
                "value": "short"
              },
              {
                "id": "decimals",
                "value": 4
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "total_usd_volume"
            },
            "properties": [
              {
                "id": "unit",
                "value": "short"
              },
              {
                "id": "decimals",
                "value": 2
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "percentage"
            },
            "properties": [
              {
                "id": "unit",
                "value": "percent"
              },
              {
                "id": "decimals",
                "value": 1
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 12,
        "y": 10
      },
      "id": 4,
      "options": {
        "showHeader": true,
        "sortBy": [
          {
            "desc": true,
            "displayName": "count"
          }
        ]
      },
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "P528E980D87101141"
          },
          "format": "table",
          "rawQuery": true,
          "rawSql": "WITH trade_stats AS (\n  SELECT \n    CASE \n      WHEN quantity * price < 1000 THEN 'Small (<1K USDT)'\n      WHEN quantity * price < 10000 THEN 'Medium (1K-10K USDT)'\n      WHEN quantity * price < 100000 THEN 'Large (10K-100K USDT)'\n      ELSE 'Very Large (>100K USDT)'\n    END as size_category,\n    COUNT(*) as count,\n    AVG(quantity * price) as avg_usdt_value,\n    SUM(quantity * price) as total_usdt_volume,\n    MIN(quantity * price) as min_usdt_size,\n    MAX(quantity * price) as max_usdt_size\n  FROM trades\n  WHERE symbol = '$symbol'\n    AND CASE \n      WHEN '$exchange_filter' = '__all' THEN true\n      ELSE exchange = '$exchange_filter'\n    END\n    AND $__timeFilter(timestamp)\n  GROUP BY size_category\n)\nSELECT \n  size_category as \"Size Category\",\n  count as \"Trade Count\",\n  ROUND(avg_usdt_value::numeric, 2) as \"Avg USDT Value\",\n  ROUND(total_usdt_volume::numeric, 2) as \"Total USDT Volume\",\n  ROUND(100.0 * count / SUM(count) OVER (), 1) as \"Percentage\",\n  ROUND(min_usdt_size::numeric, 2) as \"Min USDT Size\",\n  ROUND(max_usdt_size::numeric, 2) as \"Max USDT Size\"\nFROM trade_stats\nORDER BY \n  CASE size_category\n    WHEN 'Small (<1K USDT)' THEN 1\n    WHEN 'Medium (1K-10K USDT)' THEN 2\n    WHEN 'Large (10K-100K USDT)' THEN 3\n    ELSE 4\n  END",
          "refId": "A"
        }
      ],
      "title": "Trade Size Calculation Details",
      "type": "table"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "P528E980D87101141"
      },
      "description": "Spread evolution over time",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "Spread (bps)",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 20,
            "gradientMode": "opacity",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "smooth",
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": true,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "area"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "yellow",
                "value": 5
              },
              {
                "color": "red",
                "value": 10
              }
            ]
          },
          "unit": "none"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 24,
        "x": 0,
        "y": 18
      },
      "id": 5,
      "options": {
        "legend": {
          "calcs": [
            "mean",
            "min",
            "max"
          ],
          "displayMode": "table",
          "placement": "right",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "P528E980D87101141"
          },
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT \n  timestamp as time,\n  exchange as metric,\n  spread_bps as value\nFROM mm_metrics\nWHERE symbol = '$symbol'\n  AND CASE \n    WHEN '$exchange_filter' = '__all' THEN true\n    ELSE exchange = '$exchange_filter'\n  END\n  AND $__timeFilter(timestamp)\n  AND spread_bps IS NOT NULL\n  AND spread_bps < 100\nORDER BY timestamp",
          "refId": "A"
        }
      ],
      "title": "Spread Maintenance Quality",
      "type": "timeseries"
    }
  ],
  "refresh": "10s",
  "schemaVersion": 38,
  "style": "dark",
  "tags": [
    "market-maker",
    "detection"
  ],
  "templating": {
    "list": [
      {
        "current": {
          "selected": false,
          "text": "PostgreSQL-TimescaleDB",
          "value": "PostgreSQL-TimescaleDB"
        },
        "hide": 0,
        "includeAll": false,
        "multi": false,
        "name": "datasource",
        "options": [],
        "query": "postgres",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "type": "datasource"
      },
      {
        "current": {
          "selected": true,
          "text": "BTCUSDT",
          "value": "BTCUSDT"
        },
        "hide": 0,
        "includeAll": false,
        "label": "Symbol",
        "multi": false,
        "name": "symbol",
        "options": [
          {
            "selected": true,
            "text": "BTCUSDT",
            "value": "BTCUSDT"
          }
        ],
        "query": "BTCUSDT",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      },
      {
        "current": {
          "selected": true,
          "text": "pancakeswap",
          "value": "pancakeswap"
        },
        "datasource": {
          "type": "postgres",
          "uid": "P528E980D87101141"
        },
        "definition": "SELECT '__all' as exchange UNION ALL SELECT DISTINCT exchange FROM trades WHERE symbol = '$symbol' ORDER BY exchange",
        "hide": 0,
        "includeAll": false,
        "label": "Exchange",
        "multi": false,
        "name": "exchange_filter",
        "options": [],
        "query": "SELECT '__all' as exchange UNION ALL SELECT DISTINCT exchange FROM trades WHERE symbol = '$symbol' ORDER BY exchange",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 1,
        "type": "query"
      }
    ]
  },
  "time": {
    "from": "now-1h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "Market Maker Detection",
  "uid": "market-maker-detection",
  "version": 1,
  "weekStart": ""
}